# Regular Expressions syntax for XMLSchema DataTypes:
# http://www.w3.org/TR/xmlschema11-2/#regexs
# http://www.w3.org/TR/xmlschema-2/#regexs
[ xml:id = "datatypes-common" ]
div {
  datatype.languagecode = datatype.BCP47
  # http://www.w3.org/TR/xmlschema11-2/#language
  datatype.BCP47 = xsd:language { pattern = "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*" }
  # http://www.w3.org/TR/xmlschema11-2/#ID
  # http://www.w3.org/TR/html5/elements.html#the-id-attribute
  datatype.ID.xsd = xsd:ID
  # http://www.w3.org/TR/xmlschema11-2/#NCName
  datatype.IDREF.lexical = xsd:NCName
  datatype.ID.lexical = xsd:NCName
  # http://www.w3.org/TR/xmlschema11-2/#IDREF
  datatype.IDREF.xsd = xsd:IDREF
  # http://www.w3.org/TR/xmlschema11-2/#IDREFS
  datatype.IDREFS.xsd = xsd:IDREFS
  # http://www.w3.org/TR/xmlschema11-2/#NMTOKEN
  datatype.NMTOKEN = xsd:NMTOKEN
  # http://www.w3.org/TR/xmlschema11-2/#NMTOKENS
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#space-separated-tokens
  datatype.NMTOKENS = xsd:NMTOKENS
  # http://www.w3.org/TR/xmlschema11-2/#string
  datatype.string = xsd:string
  datatype.ID = datatype.ID.lexical
  datatype.IDREF = datatype.IDREF.lexical
  datatype.IDREFS = datatype.IDREFS.lexical
  datatype.IDREFS.lexical = string
  datatype.text = text
  # TODO
  # http://www.w3.org/TR/leiri/
  # for xml:base
  datatype.LEIRI = xsd:anyURI
  # http://www.w3.org/TR/xmlschema11-2/#anyURI
  # http://tools.ietf.org/html/rfc3986#appendix-B
  # http://www.w3.org/TR/html5/urls.html#valid-url-potentially-surrounded-by-spaces
  datatype.URI =
    xsd:anyURI { pattern = "(\s*)(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?(\s*)" }
  datatype.URI.absolute =
    xsd:anyURI { pattern = "(\s*)(([^:/?#]+):)(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?(\s*)" }
  datatype.IRI = datatype.URI
  # cowan datatype.URI = xsd:anyURI - xsd:string { pattern = '.*[ <>{}|^`"\\\n\r\t].*' }
  datatype.character.encoding = datatype.iana.charset
  # TODO
  datatype.iana.charset = text
  # TODO
  # http://www.w3.org/TR/html5/infrastructure.html#valid-mime-type
  datatype.mimetype = text
  # TODO
  datatype.mimetype.nocharset = text
  # http://www.w3.org/TR/xmlschema11-2/#nonNegativeInteger
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#non-negative-integers
  datatype.non-negative.integer = xsd:nonNegativeInteger
  # http://www.w3.org/TR/xmlschema11-2/#positiveInteger
  datatype.positive.integer = xsd:positiveInteger
  # http://www.w3.org/TR/xmlschema11-2/#integer
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#signed-integers
  datatype.integer = xsd:integer
  # http://www.w3.org/TR/xmlschema11-2/#nt-floatRep
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#real-numbers
  # (\+|-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)([Ee](\+|-)?[0-9]+)?|(\+|-)?INF|NaN
  datatype.float =
    xsd:float { pattern = "-?[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  # (\+)?(0*[1-9][0-9]*(\.[0-9]*)?|\.[0-9]+)([Ee](\+)?[0-9]+)?|(\+)?INF|NaN
  # ZERO not allowed
  datatype.float.positive =
    xsd:float {
      pattern = "(0*[1-9][0-9]*(\.[0-9]+)?)|([0-9]+(\.0*[1-9][0-9]*)?)([eE]-?[0-9]+)?"
    }
  # (\+)?([0-9]+(\.[0-9]*)?|\.[0-9]+)([Ee](\+)?[0-9]+)?|(\+)?INF|NaN
  # ZERO allowed
  datatype.float.non-negative =
    xsd:float { pattern = "[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  # http://www.w3.org/TR/xmlschema11-2/#boolean
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#boolean-attributes
  datatype.bool = xsd:boolean { pattern = "'true'|'false'|'1'|'0'" }
}
[ xml:id = "datatypes-smil" ]
div {
  # http://www.w3.org/TR/smil/smil-timing.html#TimingSyntax-Full-clock-value
  # http://www.w3.org/TR/smil/smil-timing.html#TimingSyntax-Partial-clock-value
  # http://www.w3.org/TR/smil/smil-timing.html#TimingSyntax-Timecount-value
  datatype.smil.npt =
    xsd:string { pattern = "(\s*)[0-9]+:[0-5][0-9]:[0-5][0-9](\.[0-9]+)?(\s*)" }
    | # Full-clock-val
      xsd:string { pattern = "(\s*)[0-5][0-9]:[0-5][0-9](\.[0-9]+)?(\s*)" }
    | # Partial-clock-val
      xsd:string { pattern = "(\s*)[0-9]+(\.[0-9]+)?(h|min|s|ms)?(\s*)" }
  # Timecount-val      
  
}
[ xml:id = "datatypes-rdfa" ]
div {
  datatype.rdfa.CURIE = xsd:NMTOKEN
  # TODO       
  datatype.rdfa.CURIEs = xsd:NMTOKENS
  # TODO
  datatype.rdfa.prefix = text
  # TODO
  
}
[ xml:id = "datatypes-ssml" ]
div {
  # http://www.w3.org/TR/speech-synthesis11/#edef_phoneme
  datatype.ssml.PhoneticExpression = xsd:string
  datatype.ssml.PhoneticAlphabet = xsd:string { pattern = "(ipa|x-.+)" }
}
[ xml:id = "datatypes-html5" ]
div {
  # http://www.w3.org/TR/html5/browsers.html#valid-browsing-context-name-or-keyword
  #		xsd:string { browsing.context.name.or.keyword
  #		pattern = "()|([^_].*)|(_[bB][lL][aA][nN][kK])|(_[sS][eE][lL][fF])|(_[pP][aA][rR][eE][nN][tT])|(_[tT][oO][pP])"
  #		}
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#keywords-and-enumerated-attributes
  datatype.html5.browsing.context.name.or.keyword = text
  datatype.html5.browsing.context.name = text
  # http://www.w3.org/TR/xmlschema11-2/#NMTOKENS
  # may be too restrictive compared to
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#space-separated-tokens
  datatype.html5.space.separated.tokens = xsd:NMTOKENS
  # TODO
  datatype.html5.ordered.set.unique.tokens = text
  datatype.html5.URL.spaces = datatype.URI
  # TODO
  # http://dev.w3.org/csswg/css3-mediaqueries/#syntax
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#mq
  datatype.html5.media.query = text
  # TODO
  datatype.html5.name = text
  # TODO
  datatype.html5.name.reference = text
  # ([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z?
  # http://www.w3.org/TR/xmlschema11-2/#nt-dateTimeRep
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#dates-and-times
  datatype.html5.datetime = text
    #xsd:dateTime
    #{
    #  pattern =
    #    "-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?|(24:00:00(\.0+)?))(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
    #}
  # http://www.w3.org/TR/xmlschema11-2/#nt-timeRep
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#times
  datatype.html5.time = text
    #xsd:time
    #{
    #  pattern =
    #    "(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?|(24:00:00(\.0+)?))(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
    #}
  # http://www.w3.org/TR/xmlschema11-2/#nt-dateRep
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#dates
  datatype.html5.date = text
    #xsd:date
    #{
    #  pattern =
    #    "-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
    #}
  datatype.html5.date.optional.time = datatype.html5.date
  datatype.accesskey = datatype.html5.ordered.set.unique.tokens
  # TODO
  datatype.html5.coords.rectangle = xsd:token { pattern = "-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+" }
  datatype.html5.coords.circle = xsd:token { pattern = "-?[0-9]+,-?[0-9]+,[0-9]+" }
  datatype.html5.coords.poly =
    xsd:token {
      pattern = "-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+(,-?[0-9]+,-?[0-9]+)*"
    }
  datatype.functionbody = datatype.string
  # TODO
  datatype.html5.script = text
  # TODO
  datatype.html5.script.documentation = text
  # TODO
  datatype.iframe.srcdoc.xml = datatype.string
  # TODO iframe @srcdoc in xml serialization
  datatype.style = datatype.string
  # TODO <style> scoped and unscoped, @style
  datatype.sizes =
    list {
      xsd:string { pattern = "[1-9][0-9]*x[1-9][0-9]*" }+
    }
}
[ xml:id = "datatypes-html5forms" ]
div {
  # http://www.w3.org/TR/html5/forms.html
  datatype.html5.forms.mimetypelist = datatype.html5.space.separated.tokens
  # http://www.w3.org/TR/html5/forms.html#attr-form-accept-charset
  datatype.html5.forms.charsetlist = datatype.html5.space.separated.tokens
  # TODO
  # http://www.w3.org/TR/html5/common-input-element-attributes.html#attr-input-pattern
  datatype.html5.forms.pattern = text
  datatype.html5.forms.datetime.local = datatype.html5.datetime
  datatype.html5.forms.date = datatype.html5.date
  datatype.html5.forms.time = datatype.html5.time
  # TODO
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#months
  datatype.html5.forms.month = text
  # TODO
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#weeks
  datatype.html5.forms.week = text
  # TODO
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#colors
  datatype.html5.forms.color = text
  # TODO
  datatype.html5.forms.emailaddress = xsd:string { pattern = "[^@]+@[^@]+" }
  # TODO
  datatype.html5.forms.emailaddresslist = xsd:string { pattern = "([^@]+@[^@]+,)*([^@]+@[^@]+)" }
}
